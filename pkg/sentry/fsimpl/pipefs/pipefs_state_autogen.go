// automatically generated by stateify.

package pipefs

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *filesystemType) StateTypeName() string {
	return "pkg/sentry/fsimpl/pipefs.filesystemType"
}

func (x *filesystemType) StateFields() []string {
	return []string{}
}

func (x *filesystemType) beforeSave() {}

func (x *filesystemType) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *filesystemType) afterLoad() {}

func (x *filesystemType) StateLoad(m state.Source) {
}

func (x *filesystem) StateTypeName() string {
	return "pkg/sentry/fsimpl/pipefs.filesystem"
}

func (x *filesystem) StateFields() []string {
	return []string{
		"Filesystem",
		"devMinor",
	}
}

func (x *filesystem) beforeSave() {}

func (x *filesystem) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Filesystem)
	m.Save(1, &x.devMinor)
}

func (x *filesystem) afterLoad() {}

func (x *filesystem) StateLoad(m state.Source) {
	m.Load(0, &x.Filesystem)
	m.Load(1, &x.devMinor)
}

func (x *inode) StateTypeName() string {
	return "pkg/sentry/fsimpl/pipefs.inode"
}

func (x *inode) StateFields() []string {
	return []string{
		"InodeNotDirectory",
		"InodeNotSymlink",
		"InodeNoopRefCount",
		"locks",
		"pipe",
		"ino",
		"uid",
		"gid",
		"ctime",
	}
}

func (x *inode) beforeSave() {}

func (x *inode) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeNotDirectory)
	m.Save(1, &x.InodeNotSymlink)
	m.Save(2, &x.InodeNoopRefCount)
	m.Save(3, &x.locks)
	m.Save(4, &x.pipe)
	m.Save(5, &x.ino)
	m.Save(6, &x.uid)
	m.Save(7, &x.gid)
	m.Save(8, &x.ctime)
}

func (x *inode) afterLoad() {}

func (x *inode) StateLoad(m state.Source) {
	m.Load(0, &x.InodeNotDirectory)
	m.Load(1, &x.InodeNotSymlink)
	m.Load(2, &x.InodeNoopRefCount)
	m.Load(3, &x.locks)
	m.Load(4, &x.pipe)
	m.Load(5, &x.ino)
	m.Load(6, &x.uid)
	m.Load(7, &x.gid)
	m.Load(8, &x.ctime)
}

func init() {
	state.Register((*filesystemType)(nil))
	state.Register((*filesystem)(nil))
	state.Register((*inode)(nil))
}
