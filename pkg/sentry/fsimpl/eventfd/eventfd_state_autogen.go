// automatically generated by stateify.

package eventfd

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *EventFileDescription) StateTypeName() string {
	return "pkg/sentry/fsimpl/eventfd.EventFileDescription"
}

func (x *EventFileDescription) StateFields() []string {
	return []string{
		"vfsfd",
		"FileDescriptionDefaultImpl",
		"DentryMetadataFileDescriptionImpl",
		"NoLockFD",
		"val",
		"semMode",
		"hostfd",
	}
}

func (x *EventFileDescription) beforeSave() {}

func (x *EventFileDescription) StateSave(m state.Sink) {
	x.beforeSave()
	if !state.IsZeroValue(&x.queue) {
		state.Failf("queue is %#v, expected zero", &x.queue)
	}
	m.Save(0, &x.vfsfd)
	m.Save(1, &x.FileDescriptionDefaultImpl)
	m.Save(2, &x.DentryMetadataFileDescriptionImpl)
	m.Save(3, &x.NoLockFD)
	m.Save(4, &x.val)
	m.Save(5, &x.semMode)
	m.Save(6, &x.hostfd)
}

func (x *EventFileDescription) afterLoad() {}

func (x *EventFileDescription) StateLoad(m state.Source) {
	m.Load(0, &x.vfsfd)
	m.Load(1, &x.FileDescriptionDefaultImpl)
	m.Load(2, &x.DentryMetadataFileDescriptionImpl)
	m.Load(3, &x.NoLockFD)
	m.Load(4, &x.val)
	m.Load(5, &x.semMode)
	m.Load(6, &x.hostfd)
}

func init() {
	state.Register((*EventFileDescription)(nil))
}
